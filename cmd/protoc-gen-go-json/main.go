package main

import (
	"flag"
	"fmt"

	"google.golang.org/protobuf/compiler/protogen"
)

const (
	code = `
func (p * %[1]s) MarshalJSON() ([]byte, error) {
	return protojson.Marshal(p)
}

func (p * %[1]s) UnmarshalJSON(data []byte) error {
	return protojson.UnMarshal(data, p)
}
`
)

func main() {
	var flags flag.FlagSet
	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

// generateFile generates a _ascii.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + "_protojson.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-json. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	g.Import("google.golang.org/protobuf/encoding/protojson")
	g.P()
	for _, msg := range file.Messages {
		g.P(fmt.Sprintf(code, msg.GoIdent))
	}
	return g
}
